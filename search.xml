<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法复杂度计算.md</title>
      <link href="/2022/11/27/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
      <url>/2022/11/27/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Master-theorem"><a href="#Master-theorem" class="headerlink" title="Master theorem"></a>Master theorem</h1><p>Let $T(n)$ be defined by $T(n) &#x3D; aT(\frac{n}{b}) + O(n^d)$ for $a&gt;1, \ b&gt;1$ and $d&gt;0$, then $T(n)$ can be bounded by:</p><ul><li>if $d&lt;log_ba$, then $T(n) &#x3D; O(n^{log_ba})$;</li><li>if $d &#x3D; log_ba$, then $T(n) &#x3D; O(n^{log_ba}logn)$;</li><li>if $d&gt;log_ba$, then $T(n) &#x3D; O(n^d)$;</li></ul><p>看到上面三个时间复杂度计算的前提条件，发现少了一项，就是 $d&#x3D;0$ 时要怎么计算，所以下面将对这四种情况进行推导说明。</p><h2 id="1-d-x3D-0"><a href="#1-d-x3D-0" class="headerlink" title="1. d&#x3D;0"></a>1. d&#x3D;0</h2><p>$d&#x3D;0$时，可以适用于只分不 merge 的情况，比如查找二叉树某结点深度等。<br>在下面计算时会用到换底公式<br>$a^{log_b^c} &#x3D; c^{log_b^a}$</p><p>$\begin{aligned}<br>T(n) &amp;&#x3D; aT(\frac{n}{b})+c \<br>&amp;&#x3D; a^2T(\frac{n}{b^2}) +2c \<br>&amp;&#x3D; a^3T(\frac{n}{b^3}) +3c \<br>&amp;\cdots \<br>&amp;&#x3D; a^{log_bn}T(\frac{n}{b^{log_bn}}) +c\cdot log_bn \<br>&amp;&#x3D; a^{log_bn}T(\frac{n}{n}) + c\cdot log_bn \<br>&amp;&#x3D; n^{log_ba}+O(logn)<br>\end{aligned}$</p><p>先判定一个边界条件，即 $a^{log_bn} &#x3D; log_bn$，此时 $a&#x3D;1$，所以我们有：</p><ul><li>当 a &gt; 1 时， $T(n)&#x3D;O(n^{log_ba})$</li><li>当 a ≤ 1 时， $T(n)&#x3D;O(logn)$</li></ul><h2 id="2-d-≠-0"><a href="#2-d-≠-0" class="headerlink" title="2. d ≠ 0"></a>2. d ≠ 0</h2><p>$\begin{aligned}<br>T(n) &amp;&#x3D; aT(\frac{n}{b}) + O(n^d) \<br>&amp;\leq aT(\frac{n}{b}) + c\cdot n^d \<br>&amp;\leq a(aT(\frac{n}{b^2}) + c(\frac{n}{b})^d)+c\cdot n^d \<br>&amp;\leq a(a(aT(\frac{n}{b^3}) + c(\frac{n}{b^2})^d)+c(\frac{n}{b})^d)+c\cdot n^d \<br>&amp;\leq \cdots \<br>&amp;\leq cn^d(1 + (\frac{a}{b^d}) + (\frac{a}{b^d})^2 + \cdots + (\frac{a}{b^d})^{log_bn-1}) + a^{log_bn} \<br>&amp;&#x3D; cn^d \cdot \frac{1-(\frac{a}{b^d})^{log_bn}}{1-\frac{a}{b^d}} + a^{log_bn}<br>\end{aligned}$</p><h3 id="2-1-if-d-lt-log-ba-即-b-d-lt-a"><a href="#2-1-if-d-lt-log-ba-即-b-d-lt-a" class="headerlink" title="2.1 if $d&lt;log_ba$ 即 $b^d&lt;a$"></a>2.1 if $d&lt;log_ba$ 即 $b^d&lt;a$</h3><p>上式子可化为</p><p>$\begin{aligned}<br>T(n) &amp;&#x3D; cn^d \cdot (\frac{a}{b^d})^{log_bn} + alog_bn \<br>&amp;&#x3D; cn^d \cdot \frac{a^{log_bn}}{b^{dlog_bn}} + n^{log_ba} \<br>&amp;&#x3D; cn^d \cdot \frac{n^{log_ba}}{n^d} + n^{log_ba} \<br>&amp;&#x3D; O(n^{log_ba})<br>\end{aligned}$</p><h3 id="2-2-if-d-x3D-log-ba-即-b-d-x3D-a"><a href="#2-2-if-d-x3D-log-ba-即-b-d-x3D-a" class="headerlink" title="2.2 if $d&#x3D;log_ba$ 即 $b^d&#x3D;a$"></a>2.2 if $d&#x3D;log_ba$ 即 $b^d&#x3D;a$</h3><p>上式子可化为</p><p>$\begin{aligned}<br>T(n) &amp;&#x3D; cn^d \cdot (1+1+\cdots +1) + n^{log_ba} \<br>&amp;&#x3D; cn^{log_ba}\cdot logn + n^{log_ba} \<br>&amp;&#x3D; O(n^{log_ba}logn)<br>\end{aligned}$</p><h3 id="2-3-if-d-gt-log-ba-即-b-d-gt-a"><a href="#2-3-if-d-gt-log-ba-即-b-d-gt-a" class="headerlink" title="2.3 if $d&gt;log_ba$ 即 $b^d&gt;a$"></a>2.3 if $d&gt;log_ba$ 即 $b^d&gt;a$</h3><p>由于 $\frac{a}{b^d} &lt; 1$ 等比数列和近似为1，上式子可化为</p><p>$\begin{aligned}<br>T(n) &amp;&#x3D; cn^d \cdot 1 + n^{log_ba} \<br>&amp;&#x3D; O(n^d)<br>\end{aligned}$</p><p>综上</p><ul><li>$T(n) &#x3D; O(n^{log_ba})$ if $d&lt;log_ba$ 即 $b^d&lt;a$</li><li>$T(n) &#x3D; O(n^{log_ba}logn)$ if $ d&#x3D;log_ba$ 即 $b^d&#x3D;a$</li><li>$T(n) &#x3D; O(n^d)$ if $ d&gt;log_ba$ 即 $b^d&gt;a$</li></ul><h2 id="3-Example"><a href="#3-Example" class="headerlink" title="3. Example"></a>3. Example</h2><p>举两个例子熟悉一下。</p><ul><li>Example1: $T(n)&#x3D;3T(\frac{n}{2})+O(n) &#x3D; O(n^{log_23}) &#x3D; O(n^{1.585})$</li><li>Example2: $T(n)&#x3D;2T(\frac{n}{2})+O(n^2)&#x3D;O(n^2)$</li></ul><p><strong>Example1</strong></p><p><img src="https://gitee.com/chenyu97/MarkdownPicBed/raw/master/Typora/complexity1.png"></p><p>$3^{log_2n}$ 是指的 T(n) 一次分三个，一共有 $log_2n$ 次。</p><p>$\begin{aligned}<br>T(n) &amp;&#x3D;3T(\frac{n}{2})+O(n) \<br>&amp;&#x3D; cn(1 + (\frac{3}{2}) + (\frac{3}{2})^2 + \cdots + (\frac{3}{2})^{log_2n-1}) + 3^{log_2n} \<br>&amp;&#x3D; cn\cdot \frac{1-(\frac{3}{2})^{log_2n}}{1-\frac{3}{2}} +3^{log_3n} \<br>&amp;&#x3D; cn \cdot \frac{3^{log_2n}}{2^{log_2n}} + 3^{log_2n} \<br>&amp;&#x3D; O(3^{log_2n}) \<br>&amp;&#x3D; O(n^{1.585})<br>\end{aligned}$</p><p><strong>Example2</strong></p><p><img src="https://gitee.com/chenyu97/MarkdownPicBed/raw/master/Typora/complexity2.png"></p><p>$\begin{aligned}<br>T(n) &amp;&#x3D;2T(\frac{n}{2})+O(n^2)\<br>&amp;&#x3D; cn^2(1 + (\frac{1}{2}) + (\frac{1}{2})^2 + \cdots + (\frac{1}{2})^{log_2n-1}) + 2^{log_2n} \<br>&amp;&#x3D; cn^2\cdot \frac{1-(\frac{1}{2})^{log_2n}}{1-\frac{1}{2}} +n \<br>&amp;&#x3D; cn^2 + n \<br>&amp;&#x3D; O(n^2) \<br>\end{aligned}$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA8 常见新特性</title>
      <link href="/2022/04/15/JAVA8%20%E5%B8%B8%E8%A7%81%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/04/15/JAVA8%20%E5%B8%B8%E8%A7%81%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-8-新特性"><a href="#JAVA-8-新特性" class="headerlink" title="JAVA 8 新特性"></a>JAVA 8 新特性</h1><h2 id="1-Lambda-表达式"><a href="#1-Lambda-表达式" class="headerlink" title="1. Lambda 表达式"></a>1. Lambda 表达式</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>Lambda 是一个<strong>匿名函数</strong>，通过 lambda 操作符 <code>-&gt;</code> 分成左右两部分：</p><ul><li>左侧：lambda 表达式的参数列表；</li><li>右侧：lambda 表达式中所需要执行的功能，即 lambda 体。</li></ul><p>Lambda 表达式需要函数式接口支持，接口中只有一个抽象方法的接口为函数式<strong>接口</strong>，可以使用注解 <code>@FunctionInterface</code> 修饰，通过该注解可检验是否为函数式接口，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非函数式接口，因为不止一个抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">xxx</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test1</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式接口，使用此注解后，如果有多个方法，那么会报错</span></span><br><span class="line"><span class="meta">@FunctionInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">xxx</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-Lambda-表达式多种语法格式"><a href="#1-2-Lambda-表达式多种语法格式" class="headerlink" title="1.2 Lambda 表达式多种语法格式"></a>1.2 Lambda 表达式多种语法格式</h3><ul><li><p>格式一：无参数、无返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">&quot;Hello Lambda&quot;</span>);</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Lambda&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        r.run();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///// lambda /////</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Hello Lambda&quot;</span>);</span><br><span class="line">        r1.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>格式二：有一个参数，并且无返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x) -&gt; System.out.println(x);</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);</span><br><span class="line">        con.accept(<span class="string">&quot;Hello Lambda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>格式三：如果只有一个参数，那么小括号可以不写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x -&gt; System.out.println(x);</span><br></pre></td></tr></table></figure></li><li><p>格式四：多个参数，有返回值，且 lambda 体中有多条语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com = (x, y) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello Lambda&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(x, y); </span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>格式五：有返回值，若 lambda 体中只有一条语句，return 和 {} 可以省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>格式六：lambda 表达式的参数列表可以省略不写，因为 JVM 编译器通过上下文可以推断数据类型。</p></li></ul><h3 id="1-3-JAVA8-内置的四大核心函数式接口"><a href="#1-3-JAVA8-内置的四大核心函数式接口" class="headerlink" title="1.3  JAVA8 内置的四大核心函数式接口"></a>1.3  JAVA8 内置的四大核心函数式接口</h3><p>除了此四大核心函数式接口外还有类似的子接口，这里就不过多赘述。</p><h4 id="1-3-1-消费型接口-Consumer-lt-T-gt"><a href="#1-3-1-消费型接口-Consumer-lt-T-gt" class="headerlink" title="1.3.1 消费型接口 Consumer&lt;T&gt;"></a>1.3.1 消费型接口 <code>Consumer&lt;T&gt;</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        happy(<span class="number">100</span>, (m) -&gt; System.out.println(<span class="string">&quot;消费：&quot;</span> + x + <span class="string">&quot;元&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happy</span><span class="params">(<span class="type">double</span> money, Consumer&lt;Double&gt; con)</span> &#123;</span><br><span class="line">        con.accept(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-供给型接口Supplier-lt-T-gt"><a href="#1-3-2-供给型接口Supplier-lt-T-gt" class="headerlink" title="1.3.2 供给型接口Supplier&lt;T&gt;"></a>1.3.2 供给型接口<code>Supplier&lt;T&gt;</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 通过随机数产生</span></span><br><span class="line">        List&lt;Integer&gt; res = getNumList(<span class="number">10</span>, () -&gt; (<span class="type">int</span>)(Math.random() * <span class="number">100</span>));</span><br><span class="line">    <span class="keyword">for</span> (Integer num : res) &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 需求：产生指定个数的整数，并放入集合中</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getNumList</span><span class="params">(<span class="type">int</span> num, Supplier&lt;Integer&gt; sup)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> sup.get();</span><br><span class="line">            list.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3-函数型接口Function-lt-T-R-gt"><a href="#1-3-3-函数型接口Function-lt-T-R-gt" class="headerlink" title="1.3.3 函数型接口Function&lt;T, R&gt;"></a>1.3.3 函数型接口<code>Function&lt;T, R&gt;</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 处理字符串的方法，去掉首位空格</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> strHandler(<span class="string">&quot;\t\t\t haha&quot;</span>, (str) -&gt; str.trim());</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理字符串的方法，数据截取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">subStr</span> <span class="operator">=</span> strHandler(<span class="string">&quot;hahahaha&quot;</span>, (str) -&gt; str.substring(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(subStr);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 需求：用于处理字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">strHandler</span><span class="params">(String str, Function&lt;String, String&gt; fun)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fun.apply(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4-断言型接口-Predicate-lt-T-gt"><a href="#1-3-4-断言型接口-Predicate-lt-T-gt" class="headerlink" title="1.3.4 断言型接口 Predicate&lt;T&gt;"></a>1.3.4 断言型接口 <code>Predicate&lt;T&gt;</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.aslist(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Lambda&quot;</span>, <span class="string">&quot;www&quot;</span>);</span><br><span class="line">        List&lt;String&gt; res = filterStr(list, (str) -&gt; s.length &gt; <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s ; res) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 需求：将满足条件的字符串放入集合</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">filterStr</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span> &#123;</span><br><span class="line">        List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str:list) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pre.test(pre)) &#123;</span><br><span class="line">                strList.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-方法引用"><a href="#1-4-方法引用" class="headerlink" title="1.4 方法引用"></a>1.4 方法引用</h3><p>如果 lambda 体中的内容已有方法实现了，我们可以使用方法引用。方法引用可以理解为 lambda 表达式的另外一种表现形式。</p><p>注意事项：</p><ol><li>lambda 体中调用方法的参数列表与返回值类型，要与函数式接口中抽象方法的函数列表和返回值类型保持一致。</li><li>如果 lambda 参数列表中的第一个参数是 实例方法的调用者，而第二个参数是实例方法的参数时，可以使用<code>ClassName::MethodName</code>。</li></ol><p>方法引用主要有以下三种格式：<code>对象::实例方法名</code>；<code>类::静态方法名</code>；<code>类::实例方法名</code>。</p><ul><li><code>对象::实例方法名</code>；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);</span><br><span class="line">        con.accept(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进入 println 之后，其内容如下，println 为实例方法，属于PrintStream类</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public void println(String x) &#123;</span></span><br><span class="line"><span class="comment">            synchronized (this) &#123;</span></span><br><span class="line"><span class="comment">                print(x);</span></span><br><span class="line"><span class="comment">                newLine();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 所以上面的 con 对应的代码行也可以写成</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">        Consumer&lt;String&gt; con1 = ps::println;</span><br><span class="line">        con1.accept(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        Consumer&lt;String&gt; con2 = System.out::println;</span><br><span class="line">        con2.accept(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>类::静态方法名</code>；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进入 Integer.compare 之后，其内容如下，compare 为静态方法，属于Integer类</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public static int compare(int x, int y) &#123;</span></span><br><span class="line"><span class="comment">            return (x &lt; y) ? -1 : ((x == y) ? 0 : 1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        Comparator&lt;Integer&gt; com1 = Integer::compare;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>类::实例方法名</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    BiPredicate&lt;String, String&gt; bp = (x, y) -&gt; x.equals(y);</span><br><span class="line">        </span><br><span class="line">        BiPredicate&lt;String, String&gt; bp2 = String::equals;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-构成器引用"><a href="#1-5-构成器引用" class="headerlink" title="1.5 构成器引用"></a>1.5 构成器引用</h3><p>注意：</p><ol><li>需要调用的构造器的参数列表要与函数式接口中抽象方法的参数列表保持一致。</li></ol><p>格式 <code>ClassName::new</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/* 无参构造器  public Employee() &#123;&#125;  */</span></span><br><span class="line">    Supplier&lt;Employee&gt; sup = () -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造器引用</span></span><br><span class="line">        Supplier&lt;Employee&gt; sup2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> sup2.get();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 带参构造器  public Employee(int id) &#123;this.id = id;&#125;  */</span></span><br><span class="line">        Function&lt;Integer, Employee&gt; fun = (x) -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(x);</span><br><span class="line">        </span><br><span class="line">        Function&lt;Integer, Employee&gt; fun1 = Employee::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp1</span> <span class="operator">=</span> fun1.apply(<span class="number">101</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 带参构造器  public Employee(int id, int age) &#123;this.id = id; this.age = age&#125;  */</span></span><br><span class="line">        BiFunction&lt;Integer, Integer, Employee&gt; bf = Employee::<span class="keyword">new</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-数组引用"><a href="#1-6-数组引用" class="headerlink" title="1.6 数组引用"></a>1.6 数组引用</h3><p>格式：<code>Type::new</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Function&lt;Integer, String[]&gt; fun = (x) -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[x];</span><br><span class="line">        String[] strs = fun.apply(<span class="number">10</span>);<span class="comment">// 得到长度为10的string数组</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        Function&lt;Integer, String[]&gt; fun1 = (x) -&gt; String[]::<span class="keyword">new</span>;</span><br><span class="line">        String[] strs1 = fun1.apply(<span class="number">10</span>);<span class="comment">// 得到长度为10的string数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Stream-API"><a href="#2-Stream-API" class="headerlink" title="2. Stream API"></a>2. Stream API</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>JAVA 8 有两大重要改变，一个是是 lambda 表达式，另一个是 Stream API（java.util.stream.*）。Stream 是 JAVA 8 中处理集合的关键抽象概念，可以指定希望对集合进行的操作，执行非常复杂的查找、过滤和映射数据等操作。</p><p>Stream 是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。集合讲的是数据，流讲的是计算。</p><p>注意：</p><ol><li>Stream 自己不会存储元素；</li><li>Stream 不会改变源对象，而是返回一个持有结果的新 Stream；</li><li>Stream 操作是延迟执行的，意味着要等到需要结果的时候才执行。</li></ol><p>Stream 操作的三个步骤：</p><ol><li><p>创建Stream</p><p>一个数据源（如集合数组等），获取一个流。</p></li><li><p>中间操作</p><p>中间操作链，对数据源的数据进行处理。</p></li><li><p>终止操作（终端操作）</p><p>执行中间操作链，并产生结果。</p></li></ol><h3 id="2-2-创建-Stream"><a href="#2-2-创建-Stream" class="headerlink" title="2.2 创建 Stream"></a>2.2 创建 Stream</h3><p>四种创建 Stream 的方法。</p><ol><li><p>通过 <code>Collection</code> 提供的 <code>stream()</code> 方法或者 <code>parallelStream()</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambd1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>Arrays</code> 中的静态方法 <code>stream()</code> 获取数组流；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] strs = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(strs);</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>Stream</code> 类中的静态方法 <code>of()</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建无限流</p><p>迭代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stream.iterate(seed, function)</span></span><br><span class="line"><span class="comment">// seed the initial element</span></span><br></pre></td></tr></table></figure><center></li></ol><img src="https://img-blog.csdnimg.cn/img_convert/1636f11712faf21fe55d846a902fd0d2.png" width="80%" />   </center>      <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">2</span>);    </span><br></pre></td></tr></table></figure><p>   生成：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @param s the &#123;@code Supplier&#125; of generated elements</span></span><br><span class="line">Stream.generate(s)</span><br></pre></td></tr></table></figure><center><img src="https://img-blog.csdnimg.cn/img_convert/a76cd3fb7c468dae8d57bf5a70a9537a.png" width="80%" /></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.generate(() -&gt; Math.random());</span><br></pre></td></tr></table></figure><h3 id="2-3-中间操作"><a href="#2-3-中间操作" class="headerlink" title="2.3 中间操作"></a>2.3 中间操作</h3><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，<strong>否则中间操作不会执行任何处理</strong>，而<strong>终止操作时一次性全部处理，称为惰性求值。</strong></p><h4 id="2-3-1-筛选与切片"><a href="#2-3-1-筛选与切片" class="headerlink" title="2.3.1 筛选与切片"></a>2.3.1 筛选与切片</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>filter(Predicate p)</td><td>接收 lambda，从流中排除某些元素。</td></tr><tr><td>distinct()</td><td>筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素。</td></tr><tr><td>limit(long maxSize)</td><td>截断流，使其元素不超过给定数量。</td></tr><tr><td>skip(long n)</td><td>跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流，与 limit(n) 互补。</td></tr></tbody></table><ul><li>filter 代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line">    List&lt;Employee&gt; employees = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">9999.99</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">58</span>, <span class="number">5555.55</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">26</span>, <span class="number">3333.33</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">36</span>, <span class="number">6666.66</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;田七&quot;</span>, <span class="number">12</span>, <span class="number">8888.88</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;田七&quot;</span>, <span class="number">12</span>, <span class="number">8888.88</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 中间操作</span></span><br><span class="line">        Stream&lt;Employee&gt; s = employees.stream()</span><br><span class="line">                .filter((e) -&gt; e.getAge() &gt; <span class="number">35</span>);</span><br><span class="line">        <span class="comment">// 终止操作</span></span><br><span class="line">        s.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==== </span><br><span class="line">Employee&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">58</span>, salary=<span class="number">5555.55</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;赵六&#x27;</span>, age=<span class="number">36</span>, salary=<span class="number">6666.66</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>limit 代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    employees.stream()</span><br><span class="line">        .filter((e) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;get..&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> e.getSalary() &gt; <span class="number">5000</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .limit(<span class="number">2</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">====</span><br><span class="line"><span class="comment">// 没有sort，所以按数组索引得到的前两个，得到两个之后就不在继续了。可以简单理解成 a==1 &amp;&amp; b==3</span></span><br><span class="line"><span class="comment">// 如果 a 不是 1，那么 b==3 不会执行。</span></span><br><span class="line">get..</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>, salary=<span class="number">9999.99</span>&#125;</span><br><span class="line">get..</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">58</span>, salary=<span class="number">5555.55</span>&#125;  </span><br></pre></td></tr></table></figure><ul><li>skip 代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    employees.stream()</span><br><span class="line">        .filter((e) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;get..&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> e.getSalary() &gt; <span class="number">5000</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .skip(<span class="number">2</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">====</span><br><span class="line">get..</span><br><span class="line">get..</span><br><span class="line">get..</span><br><span class="line">get..</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;赵六&#x27;</span>, age=<span class="number">36</span>, salary=<span class="number">6666.66</span>&#125;</span><br><span class="line">get..</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;田七&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">8888.88</span>&#125;</span><br><span class="line">get..</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;田七&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">8888.88</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>distinct 代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    employees.stream()</span><br><span class="line">        .filter((e) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;get..&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> e.getSalary() &gt; <span class="number">5000</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .skip(<span class="number">2</span>)</span><br><span class="line">        .distinct()<span class="comment">// 必须重写 Employee 类的 hashcode 和 equals 方法，因为是通过流所生成元素的 hashCode() 和 equals() 去除重复元素。</span></span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">====</span><br><span class="line">get..</span><br><span class="line">get..</span><br><span class="line">get..</span><br><span class="line">get..</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;赵六&#x27;</span>, age=<span class="number">36</span>, salary=<span class="number">6666.66</span>&#125;</span><br><span class="line">get..</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;田七&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">8888.88</span>&#125;</span><br><span class="line">get..</span><br></pre></td></tr></table></figure><h4 id="2-3-2-映射"><a href="#2-3-2-映射" class="headerlink" title="2.3.2 映射"></a>2.3.2 映射</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>map(Function f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成为一个新的元素。</td></tr><tr><td>mapToDouble(ToDoubleFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</td></tr><tr><td>mapToInt（ToIntFunction f）</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。</td></tr><tr><td>mapToLong（ToLongFunction f）</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。</td></tr><tr><td>flagMap（Function f）</td><td>接收一个函数作为参数，将流中的每个值都替换成另一个流，然后把所有流连接成一个流。</td></tr></tbody></table><ul><li>map 代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">        .map((str) -&gt; str.toUpperCase())<span class="comment">// 将list所有元素中的小写变成大写</span></span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">AA</span><br><span class="line">BB</span><br><span class="line">CC    </span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    employees.stream()</span><br><span class="line">        .map(Employee::getName) <span class="comment">// 提取所有员工名字</span></span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">===    </span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王五</span><br><span class="line">赵六</span><br><span class="line">田七</span><br><span class="line">田七    </span><br></pre></td></tr></table></figure><ul><li>flagMap 代码</li></ul><p>传统方式把字符串里的字符提取出来并转化成流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>);</span><br><span class="line">    <span class="comment">// 因为 map 返回的是流，而流中的数据又是流，所以返回值是 Stream&lt;Stream&lt;&gt;&gt;</span></span><br><span class="line">    Stream&lt;Stream&lt;Character&gt;&gt; stream = list.stream()</span><br><span class="line">        .map(DemoApplicationTests::filterCharacter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最外层 forEach 遍历的结果是流，需要再遍历一次得到流里流的数据</span></span><br><span class="line">    stream.forEach((sm) -&gt; &#123;</span><br><span class="line">        sm.forEach(System.out::println);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串转化成流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title function_">filterCharacter</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Character ch : str.toCharArray()) &#123;</span><br><span class="line">        list.add(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">a</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>如果使用 <code>flatmap</code> 也可以得到同样结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Stream&lt;Character&gt; sm = list.stream()</span><br><span class="line">        .flatMap(DemoApplicationTests::filterCharacter);</span><br><span class="line">    sm.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title function_">filterCharacter</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Character ch : str.toCharArray()) &#123;</span><br><span class="line">        list.add(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>map</code> 的入参和返回值如下，返回值类型是函数式接口返回值的 Stream 类型。即对 <code>Function</code> 而言，<code>T</code> 是入参类型，<code>R</code> 是返回值类型，而所以 <code>map</code> 的返回值是类型是 <code>Stream&lt;R&gt;</code>，所以当传入的函数式接口的返回值是 <code>Stream&lt;Character&gt;</code> （R）时，那么 <code>map</code> 得到的值是 <code>Stream&lt;Stream&lt;Character&gt;&gt;</code> （<code>Stream&lt;R&gt;</code>）。</p><center><img src="https://img-blog.csdnimg.cn/img_convert/92188c6d4afa111ee04d22c3352936b9.png" width="80%" /></center><p>而 <code>flatmap</code> 如下，返回值类型与入参的函数式接口的返回值类型一直，即函数式接口得到的是 <code>Stream&lt;Character&gt;</code> 那么 <code>flatmap</code> 得到也是 <code>Stream&lt;Character&gt;</code> 。</p><center><img src="https://img-blog.csdnimg.cn/img_convert/b736fd169e3922a78bedc56935e4a120.png" width="80%" /></center><p>有点类似 <code>add(Object obj)</code> 和 <code>addAll(Collection coll)</code> 的区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; list = Arrays.asList();</span><br><span class="line">List&lt;Object&gt; list1 = Arrays.asList();</span><br><span class="line"><span class="type">List</span> <span class="variable">arrList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(list);</span><br><span class="line"><span class="type">List</span> <span class="variable">arrList1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(list1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到 &#123;&#123;1, 2&#125;, &#123;3，4&#125;&#125;</span></span><br><span class="line"><span class="comment">// 如果处理的对象是流数据，相当于 map，map 会把多个流放到一个流里</span></span><br><span class="line">arrList.add(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>)); </span><br><span class="line">arrList.add(Arrays.asList(<span class="number">3</span>, <span class="number">4</span>));    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到 &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="comment">// 如果处理的对象是流数据，相当于 flatmap，会把多个流对应的元素放到一个流里</span></span><br><span class="line">arrList1.addAll(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>)); </span><br><span class="line">arrList1.addAll(Arrays.asList(<span class="number">3</span>, <span class="number">4</span>)); </span><br></pre></td></tr></table></figure><blockquote><p>注：由 <code>Arrays.asList()</code> 返回的是 <code>Arrays</code> 的内部类 <code>ArrayList</code>，而不是 <code>java.util.ArrayList</code>。<code>Arrays</code> 的内部类 <code>ArrayList</code> 和 <code>java.util.ArrayList</code> 都是继承 <code>AbstractList</code> ，<code>java.util.ArrayList</code>重写了 <code>remove</code>、<code>add</code> 等方法，而 <code>Arrays</code> 的内部类 <code>ArrayList</code> 没有重写，需要做 <code>List arrList = new ArrayList(list);</code> 类型转换，否则会抛出 <code>UnsupportedOperationException</code> 异常。</p></blockquote><h4 id="2-3-3-排序"><a href="#2-3-3-排序" class="headerlink" title="2.3.3 排序"></a>2.3.3 排序</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>sorted()</td><td>产生一个新流，其中按自然顺序排序。</td></tr><tr><td>sorted(Comparator comp)</td><td>产生一个新流，其中按比较器顺序排序。</td></tr></tbody></table><ul><li><p><code>sorted()</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">        .sorted()</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===</span><br><span class="line"><span class="comment">// 类似 Comparable，String 已经实现了 Comparable，所以得到是字典序排序。</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c    </span><br></pre></td></tr></table></figure></li><li><p><code>sorted(Comparator comp)</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    employees.stream()</span><br><span class="line">        .sorted((e1, e2) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 如果年龄相同就按姓名增序排，否则按年龄增序排</span></span><br><span class="line">            <span class="keyword">if</span> (e1.getAge().equals(e2.getAge())) &#123;</span><br><span class="line">                <span class="keyword">return</span> e1.getName().compareTo(e2.getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果想倒叙，返回的结果可以直接加负号</span></span><br><span class="line">                <span class="keyword">return</span> e1.getAge().compareTo(e2.getAge());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;田七&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">8888.88</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;田七&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">8888.88</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>, salary=<span class="number">9999.99</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">3333.33</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;赵六&#x27;</span>, age=<span class="number">36</span>, salary=<span class="number">6666.66</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">58</span>, salary=<span class="number">5555.55</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-终止操作"><a href="#2-4-终止操作" class="headerlink" title="2.4 终止操作"></a>2.4 终止操作</h3><h4 id="2-4-1-查找与匹配"><a href="#2-4-1-查找与匹配" class="headerlink" title="2.4.1 查找与匹配"></a>2.4.1 查找与匹配</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>allMatch(Predicate p)</td><td>检查是否匹配所有元素。</td></tr><tr><td>anyMatch(Predicate p)</td><td>检查是否至少匹配一个元素。</td></tr><tr><td>noneMatch(Predicate p)</td><td>检查是否没有匹配所有元素。</td></tr><tr><td>findFirst()</td><td>返回第一个元素。</td></tr><tr><td>findAny()</td><td>返回当前流中的任意元素。</td></tr><tr><td>count()</td><td>返回流中元素的总个数。</td></tr><tr><td>max(Comparator c)</td><td>返回流中最大值。</td></tr><tr><td>min(Comparator c)</td><td>返回流中最小值。</td></tr><tr><td>forEach(Comsumer c)</td><td>内部迭代（使用 Collection 接口需要用户去做迭代，称为外部迭代）</td></tr></tbody></table><ul><li><p>前五个方法代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; employees = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">9999.99</span>, Status.FREE),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">58</span>, <span class="number">5555.55</span>, Status.BUSY),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">26</span>, <span class="number">3333.33</span>, Status.VOCATION),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">36</span>, <span class="number">6666.66</span>, Status.FREE),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;田七&quot;</span>, <span class="number">12</span>, <span class="number">8888.88</span>, Status.BUSY)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 判断所有元素的状态是否都为 BUSY</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> employees.stream()</span><br><span class="line">                .allMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line">        System.out.println(b);  <span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断是否有元素的状态为 BUSY</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> employees.stream()</span><br><span class="line">            .anyMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line">        System.out.println(b1);  <span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断是否所有元素的状态都不为 BUSY</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> employees.stream()</span><br><span class="line">            .noneMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line">        System.out.println(b2);  <span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取最低工资的信息</span></span><br><span class="line">        <span class="comment">// 返回值 Optional 是容器类，把对象放入容器里</span></span><br><span class="line">        <span class="comment">// 通过 orElse 方法避免 op 对应的值为空，即解决了空指针异常</span></span><br><span class="line">        <span class="comment">// 如果得到的结果有可能为空时，java8 会返回 Optional 类型。</span></span><br><span class="line">        Optional&lt;Employee&gt; op = employees.stream()</span><br><span class="line">            .sorted((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()))</span><br><span class="line">            .findFirst();</span><br><span class="line">        System.out.println(op.get());<span class="comment">// Employee&#123;name=&#x27;王五&#x27;, age=26, salary=3333.33, Status=VOCATION&#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从中找到空闲状态的 employee</span></span><br><span class="line">        <span class="comment">// 找到一个就取出</span></span><br><span class="line">        Optional&lt;Employee&gt; op1 = employees.stream()</span><br><span class="line">                .filter((e) -&gt; e.getStatus().equals(Status.FREE))</span><br><span class="line">                .findAny();</span><br><span class="line">        System.out.println(op1.get());  <span class="comment">// Employee&#123;name=&#x27;张三&#x27;, age=18, salary=9999.99, Status=FREE&#125;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后三个方法代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取信息总数</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">cnt</span> <span class="operator">=</span> employees.stream()</span><br><span class="line">        .count();</span><br><span class="line">    System.out.println(cnt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最大工资对应的信息</span></span><br><span class="line">    Optional&lt;Employee&gt; op1 = employees.stream()</span><br><span class="line">        .max((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class="line">    System.out.println(op1.get());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最小的工资</span></span><br><span class="line">    Optional&lt;Double&gt; op2 = employees.stream()</span><br><span class="line">        .map(Employee::getSalary)</span><br><span class="line">        .min(Double::compare);</span><br><span class="line">    System.out.println(op2.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===</span><br><span class="line"><span class="number">5</span></span><br><span class="line">Employee&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>, salary=<span class="number">9999.99</span>, Status=FREE&#125;</span><br><span class="line"><span class="number">3333.33</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-归约与收集"><a href="#2-5-归约与收集" class="headerlink" title="2.5 归约与收集"></a>2.5 归约与收集</h3><h4 id="2-5-1-归约"><a href="#2-5-1-归约" class="headerlink" title="2.5.1 归约"></a>2.5.1 归约</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>reduce(T identify, BinaryOperator b)</td><td>可以将流中元素反复结合起来，得到一个值，返回 T。</td></tr><tr><td>reduce(BinaryOperator b)</td><td>可以将流中元素反复结合起来，得到一个值，返回 Optional<T>。</td></tr></tbody></table><ul><li>reduce(T identify, BinaryOperator b) 代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> list.stream()</span><br><span class="line">        .reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><center><img src="https://img-blog.csdnimg.cn/img_convert/f855732641cd1bb931ebc01fa1fb1f86.png" width="80%" /></center><p>其中 <code>identity</code> 是计算的初始值，<code>BinaryOperator</code> 是函数式接口，用于两个值计算。在执行第 5 行语句时，首先将 0 作为 x，然后把 1 作为 y，得到的 0+1&#x3D;1 作为下次的 x，而 2 作为下次的 y，以此类推。</p><ul><li>reduce(BinaryOperator b) 代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 计算所有人工资的总和</span></span><br><span class="line">    Optional&lt;Double&gt; op = employees.stream()</span><br><span class="line">        .map(Employee::getSalary)</span><br><span class="line">        .reduce(Double::sum);</span><br><span class="line">    System.out.println(op.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===</span><br><span class="line"><span class="number">34444.41</span></span><br></pre></td></tr></table></figure><center><img src="https://img-blog.csdnimg.cn/img_convert/345583693efb1549d0c5106823397c7a.png" width="80%" /></center><h4 id="2-5-2-收集"><a href="#2-5-2-收集" class="headerlink" title="2.5.2 收集"></a>2.5.2 收集</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>collect(Collector c)</td><td>将流转化为其他形式，接收一个 Collector 接口的实现，用于给 Stream 中元素汇总的方法。</td></tr></tbody></table><p>Collector 接口中方法的实现决定了如何对流执行收集操作（如收集到 List、Set、Map），但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例。</p><ul><li><p>代码一（数据存储）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有人的名字放到集合中</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = employees.stream()</span><br><span class="line">        .map(Employee::getName)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王五</span><br><span class="line">赵六</span><br><span class="line">田七</span><br></pre></td></tr></table></figure></li><li><p>代码二（数据存储）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果有特殊需求，也可以通过 Collectors.toCollection() 传入其他方法</span></span><br><span class="line"><span class="comment">// 下面是将名字存到 HashSet 中。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; hashSet = employees.stream()</span><br><span class="line">        .map(Employee::getName)</span><br><span class="line">        .collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line">    hashSet.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">李四</span><br><span class="line">张三</span><br><span class="line">王五</span><br><span class="line">赵六</span><br><span class="line">田七</span><br></pre></td></tr></table></figure></li><li><p>代码三（计算）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 人员总数</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> employees.stream()</span><br><span class="line">        .collect(Collectors.counting());</span><br><span class="line">    System.out.println(count);  <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平均工资</span></span><br><span class="line">    <span class="type">Double</span> <span class="variable">avg</span> <span class="operator">=</span> employees.stream()</span><br><span class="line">        .collect(Collectors.averagingDouble(Employee::getSalary));</span><br><span class="line">    System.out.println(avg);    <span class="comment">// 6888.8820000000005</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工资最大值对应的员工</span></span><br><span class="line">    Optional&lt;Employee&gt; op = employees.stream()</span><br><span class="line">        .collect(Collectors.maxBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line">    System.out.println(op.get());   <span class="comment">// Employee&#123;name=&#x27;张三&#x27;, age=18, salary=9999.99, Status=FREE&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最小工资</span></span><br><span class="line">    Optional&lt;Double&gt; min = employees.stream()</span><br><span class="line">        .map(Employee::getSalary)</span><br><span class="line">        .collect(Collectors.minBy(Double::compare));</span><br><span class="line">    System.out.println(min.get());  <span class="comment">// 3333.33</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码四（普通分组）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 按员工状态分组</span></span><br><span class="line">    Map&lt;Status, List&lt;Employee&gt;&gt; map = employees.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(Employee::getStatus));</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">&#123;VOCATION=[Employee&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">3333.33</span>, Status=VOCATION&#125;], BUSY=[Employee&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">58</span>, salary=<span class="number">5555.55</span>, Status=BUSY&#125;, Employee&#123;name=<span class="string">&#x27;田七&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">8888.88</span>, Status=BUSY&#125;], FREE=[Employee&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>, salary=<span class="number">9999.99</span>, Status=FREE&#125;, Employee&#123;name=<span class="string">&#x27;赵六&#x27;</span>, age=<span class="number">36</span>, salary=<span class="number">6666.66</span>, Status=FREE&#125;]&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码五（多级分组）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先按状态分组，再按年龄分组</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 按员工状态分组</span></span><br><span class="line">    Map&lt;Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; map = employees.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy((e) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (((Employee) e).getAge() &lt;= <span class="number">35</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;青年&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (((Employee) e).getAge() &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;中年&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;老年&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)));</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">&#123;VOCATION=&#123;青年=[Employee&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">3333.33</span>, Status=VOCATION&#125;]&#125;, BUSY=&#123;青年=[Employee&#123;name=<span class="string">&#x27;田七&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">8888.88</span>, Status=BUSY&#125;], 老年=[Employee&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">58</span>, salary=<span class="number">5555.55</span>, Status=BUSY&#125;]&#125;, FREE=&#123;青年=[Employee&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>, salary=<span class="number">9999.99</span>, Status=FREE&#125;], 中年=[Employee&#123;name=<span class="string">&#x27;赵六&#x27;</span>, age=<span class="number">36</span>, salary=<span class="number">6666.66</span>, Status=FREE&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码六（分区）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照 true false 分，满足条件的一个区，不满足的一个</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;Boolean, List&lt;Employee&gt;&gt; map = employees.stream()</span><br><span class="line">        .collect(Collectors.partitioningBy((e) -&gt; e.getSalary() &gt; <span class="number">8000</span>));</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">&#123;<span class="literal">false</span>=[Employee&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">58</span>, salary=<span class="number">5555.55</span>, Status=BUSY&#125;, Employee&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">3333.33</span>, Status=VOCATION&#125;, Employee&#123;name=<span class="string">&#x27;赵六&#x27;</span>, age=<span class="number">36</span>, salary=<span class="number">6666.66</span>, Status=FREE&#125;], <span class="literal">true</span>=[Employee&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>, salary=<span class="number">9999.99</span>, Status=FREE&#125;, Employee&#123;name=<span class="string">&#x27;田七&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">8888.88</span>, Status=BUSY&#125;]&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码七（summary statistics）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DoubleSummaryStatistics</span> <span class="variable">dss</span> <span class="operator">=</span> employees.stream()</span><br><span class="line">        .collect(Collectors.summarizingDouble(Employee::getSalary));</span><br><span class="line">    System.out.println(dss.getMax());</span><br><span class="line">    System.out.println(dss.getAverage());</span><br><span class="line">    System.out.println(dss.getCount());</span><br><span class="line">    System.out.println(dss.getMin());</span><br><span class="line">    System.out.println(dss.getSum());</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line"><span class="number">9999.99</span></span><br><span class="line"><span class="number">6888.8820000000005</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3333.33</span></span><br><span class="line"><span class="number">34444.41</span></span><br></pre></td></tr></table></figure></li><li><p>代码八（join）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有名字，名字之间逗号分隔</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> employees.stream()</span><br><span class="line">        .map(Employee::getName)</span><br><span class="line">        .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">张三,李四,王五,赵六,田七</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 收尾加字符</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> employees.stream()</span><br><span class="line">        .map(Employee::getName)</span><br><span class="line">        .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;---&quot;</span>, <span class="string">&quot;+++&quot;</span>));</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;    </span><br><span class="line">===</span><br><span class="line">---张三,李四,王五,赵六,田七+++</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-并行流与串行流"><a href="#3-并行流与串行流" class="headerlink" title="3. 并行流与串行流"></a>3. 并行流与串行流</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><p>并行流就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流。Stream API 可以声明性的通过 <code>parallel()</code> 与 <code>sequential()</code> 在并行与串行流之间进行切换。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">reduce</span> <span class="operator">=</span> IntStream.range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">        .parallel()</span><br><span class="line">        .reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">    System.out.println(reduce);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>parallel</code> 主要基于 fork&#x2F;join 框架，采用 “工作窃取” 模式，当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中拿取一个任务并放入自己的队列中。</p><h3 id="3-2-Fork-x2F-Join-框架"><a href="#3-2-Fork-x2F-Join-框架" class="headerlink" title="3.2 Fork&#x2F;Join 框架"></a>3.2 Fork&#x2F;Join 框架</h3><center><img src="https://img-blog.csdnimg.cn/img_convert/75780c99524ba3a1f9e0ae80f9bd6104.png" width="50%" /></center><p>相对于一般的线程池实现，fork&#x2F;join 框架的优势体现在对其中包含的任务的处理方式上。在一般线程池中，如果一个线程正在执行的任务由于某些原因无法继续执行，那么该线程会处于等待状态。而 fork&#x2F;join 框架实现中，假设线程 2 优先把分配到自己队列里的任务执行完毕，此时<strong>如果线程 1 对应的队列里还有任务等待执行，空闲的线程 2 会窃取线程 1 队列里任务执行</strong>，并且为了减少窃取任务时线程 2 和被窃取任务线程 1 之间的发生竞争，队列采用双向队列，<strong>窃取任务的线程 2 会从队列的尾部获取任务执行，被窃取任务线程 1 会从队列的头部获取任务执行。</strong></p><center><img src="https://img-blog.csdnimg.cn/img_convert/9cea18884250c3f5d072ff80293abfa7.png" width="50%" /></center><p><strong>工作窃取算法的优点</strong>：线程间的竞争很少，充分利用线程进行并行计算，但是在任务队列里只有一个任务时，也可能会存在竞争情况。</p><h2 id="4-Optional-类"><a href="#4-Optional-类" class="headerlink" title="4. Optional 类"></a>4. Optional 类</h2><h3 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h3><p><code>Optional&lt;T&gt;</code> 类（<code>java.util.Optional</code>）是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念，并且<strong>可以避免空指针异常</strong>。</p><p>常用方法：</p><ul><li><code>Optional.of(T t)</code>：创建一个 Optional 实例；</li><li><code>Optional.empty()</code>：创建一个空的 Optional 实例；</li><li><code>Optional.ofNullable(T t)</code>：若 t 不为 null，创建 Optional 实例，否则创建空实例；</li><li><code>isPresent()</code>：判断是否包含值；</li><li><code>orElse(T t)</code>：如果调用对象包含值，返回该值，否则返回 t；</li><li><code>orElseGet(Supplier s)</code>：如果调用对象包含值，返回该值，否则返回 s 获取的值；</li><li><code>map(Function f)</code>：如果有值对其处理，并返回处理后的 Optional，否则返回 <code>Optional.empty()</code>；</li><li><code>flatMap(Function mapper)</code>：与 map 类似，要求返回值必须是 Optional。</li></ul><h3 id="4-2-相关用法"><a href="#4-2-相关用法" class="headerlink" title="4.2 相关用法"></a>4.2 相关用法</h3><h4 id="4-2-1-of-实例创建"><a href="#4-2-1-of-实例创建" class="headerlink" title="4.2.1 of 实例创建"></a>4.2.1 of 实例创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 实例创建</span></span><br><span class="line">    Optional&lt;Employee&gt; op = Optional.of(<span class="keyword">new</span> <span class="title class_">Employee</span>());</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> op.get();</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">0</span>, salary=<span class="number">0.0</span>, Status=<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-相关空实例对比"><a href="#4-2-2-相关空实例对比" class="headerlink" title="4.2.2 相关空实例对比"></a>4.2.2 相关空实例对比</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Optional.of(null)</span></span><br><span class="line">Optional&lt;Employee&gt; op = Optional.of(<span class="literal">null</span>);  <span class="comment">// 这里会报错, NullPointerException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional.empty()</span></span><br><span class="line">Optional&lt;Employee&gt; op2 = Optional.empty();</span><br><span class="line">System.out.println(op2.get());  <span class="comment">// java.util.NoSuchElementException: No value present</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional.ofNullable(null)</span></span><br><span class="line">Optional&lt;Employee&gt; op4 = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">System.out.println(op4.get());  <span class="comment">// java.util.NoSuchElementException: No value present</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional.ofNullable</span></span><br><span class="line">Optional&lt;Employee&gt; op3 = Optional.ofNullable(<span class="keyword">new</span> <span class="title class_">Employee</span>());</span><br><span class="line">System.out.println(op3.get());  <span class="comment">// Employee&#123;name=&#x27;null&#x27;, age=0, salary=0.0, Status=null&#125;</span></span><br></pre></td></tr></table></figure><p><code>ofNullable()</code> 源码如下：</p><center><img src="https://img-blog.csdnimg.cn/img_convert/72b903937055c18828012553f973f591.png" width="80%" /></center><p>value 为 null 会创建 empty，所以 <code>Optional.ofNullable(null)</code> 也是在 get 的时候报错，直接打印 <code>op3</code> 结果是：<code>Optional.empty</code>。</p><h4 id="4-2-3-避免空值的方法"><a href="#4-2-3-避免空值的方法" class="headerlink" title="4.2.3 避免空值的方法"></a>4.2.3 避免空值的方法</h4><p>可以通过 <code>isPresent()</code> 方法或 <code>orElse</code> 等对 <code>Optional</code> 对象进行判断，如果避免报错 <code>java.util.NoSuchElementException: No value present</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// isPresent</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    Optional&lt;Employee&gt; op4 = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (op4.isPresent()) &#123;</span><br><span class="line">        System.out.println(op4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">无打印</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// orElse</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    Optional&lt;Employee&gt; op = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 如果没有值就创建</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> op.orElse(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;zz&quot;</span>, <span class="number">1</span>, <span class="number">1</span>, Status.BUSY));</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;zz&#x27;</span>, age=<span class="number">1</span>, salary=<span class="number">1.0</span>, Status=BUSY&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// orElseGet</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    Optional&lt;Employee&gt; op = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 可以传入函数式接口</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> op.orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;zz&quot;</span>, <span class="number">1</span>, <span class="number">1</span>, Status.BUSY));</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;zz&#x27;</span>, age=<span class="number">1</span>, salary=<span class="number">1.0</span>, Status=BUSY&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-map-与-flatMap"><a href="#4-2-4-map-与-flatMap" class="headerlink" title="4.2.4 map 与 flatMap"></a>4.2.4 map 与 flatMap</h4><ul><li><p>map 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    Optional&lt;Employee&gt; op = Optional.ofNullable(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;zz&quot;</span>, <span class="number">1</span>, <span class="number">1</span>, Status.BUSY));</span><br><span class="line">    Optional&lt;String&gt; str = op.map((e) -&gt; e.getName());</span><br><span class="line">    System.out.println(str.get());</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">zz</span><br></pre></td></tr></table></figure></li><li><p>flatMap 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    Optional&lt;Employee&gt; op = Optional.ofNullable(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;zz&quot;</span>, <span class="number">1</span>, <span class="number">1</span>, Status.BUSY));</span><br><span class="line">    <span class="comment">// 要求返回值必须是 Optional，所以加了 Optional.of</span></span><br><span class="line">    Optional&lt;String&gt; str = op.flatMap((e) -&gt; Optional.of(e.getName()));</span><br><span class="line">    System.out.println(str.get());</span><br><span class="line">&#125;</span><br><span class="line">===</span><br><span class="line">zz</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
